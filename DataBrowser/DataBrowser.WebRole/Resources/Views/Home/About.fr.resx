<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutPageContent" xml:space="preserve">
    <value>&lt;p&gt;
            OGDI DataLab (Open Government Data Initiative) est est une initiative menée par les équipes Microsoft en charge du
    &lt;a href="http://www.microsoft.com/france/entreprises/secteur-public/solutions-pour-secteur-public.aspx" target="_blank"&gt; Secteur Public&lt;/a&gt;
    &lt;img alt="External link for Public Sector Developer Evangelism team" src="/images/ExternalLink.png" longdesc="desc/Publicsector.txt"&gt;.
    OGDI DataLab utilise la &lt;a href="http://www.microsoft.com/france/windows-azure/" target="_blank"&gt;plateforme Windows Azure&lt;/a&gt;
    &lt;img alt="External link for Windows Azure Platform" src="/images/ExternalLink.png" longdesc="desc/azureservices.txt"&gt;
    dans les nuages pour faciliter la publication et l'utilisation d’informations publiques (open data) variées provenant d'entités publiques 
    (gouvernement, ministères, collectivités locales et territoriales, mairies, services déconcentrés de l'Etat, etc.). 
    OGDI DataLab est également un kit de démarrage gratuit sous licence libre 
    &lt;a href="http://www.microsoft.com/france/opensource/les-licences-open-source-microsoft.aspx" target="_blank"&gt; Microsoft Public License (Ms-PL) &lt;/a&gt;
    &lt;img alt="External link for Microsoft Public License (Ms-PL)" src="/images/ExternalLink.png"&gt;
    avec son 
    &lt;a href="http://www.microsoft.com/france/opensource/les-licences-open-source-microsoft.aspx" target="_blank"&gt; code source &lt;/a&gt;
    &lt;img alt="External link for Microsoft open source licences" src="/images/ExternalLink.png"&gt;
    qui peut être utilisé pour publier des données sur
    l'Internet dans un format reposant sur les principes fondamentaux du Web avec des
    interfaces programmatiques (API) ouvertes faciles d’utilisation. Les API d’OGDI DataLab
    fondées sur le Web sont accessibles par une très large variété de technologies utilisées
    aujourd’hui sur Internet telles que ASP.NET, JavaScript, Flash, Flex, PHP, Python, Ruby, Silverlight, Objective-C (iPhone, iOS), Android, etc. 
&lt;/p&gt;

&lt;p&gt;
    Que vous soyez une Administration, une Collectivité Territoriale, une entreprise
    en contrat avec une telle entité, une entreprise souhaitant utiliser les informations
    publiques, ou un développeur « citoyen », ces API ouvertes vous permettent de construire
    des applications innovantes, des représentations graphiques avancées et des agrégations
    (mash-up) de données dont pourront bénéficier les citoyens et usagers. Ce site est
    construit à l’aide des composants logiciel proposés par le Kit de démarrage OGDI DataLab
    et propose un accès interactif à certains ensembles de données accessibles au public
    avec les exemples de code et ressources associées pour écrire des applications en
    utilisant le modèle de programmation mis en œuvre par OGDI Datalab.
&lt;/p&gt;

&lt;p&gt;
    Envoyez nous un mail à &lt;a href="mailto:ogdifrance@live.fr"&gt;ogdifrance@live.fr&lt;/a&gt;
    si vous avez des données publiques que vous souhaitez que nous publions ou si vous
    avez des questions.
&lt;/ p&gt;</value>
  </data>
  <data name="AboutPageHeading" xml:space="preserve">
    <value>&lt;h3&gt;A propos d'OGDI DataLab&lt;/h3&gt;</value>
  </data>
</root>