<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlsoNoteThatIfAPropertyHasANullValue" xml:space="preserve">
    <value>A noter que si une propriété d'un ensemble de données a une valeur nulle, elle sera inexistante dans le résultat retourné par le service de données d’OGDI DataLab. Par exemple, si dans un ensemble de données vous avez la propriété ville et arrondissement et que votre requête ne retourne que des villes sans arrondissement, le champ arrondissement ne sera pas retourné. Votre application doit prendre en compte la possible absence d'un champ dans le résultat retourné.</value>
  </data>
  <data name="AtomPub" xml:space="preserve">
    <value>AtomPub</value>
  </data>
  <data name="ByDefaultOGDIReturnsDataInTheAtomPub" xml:space="preserve">
    <value>Par défaut, OGDI DataLab retourne les données dans
le format du &lt;a href="http://odata.org/"
				target="_blank"&gt;protocole Odata (Open Data Protocol)&lt;/a&gt;&lt;img
					src="/Images/ExternalLink.png" 
					alt="Open Data Protocol (OData)"
					longdesc="/Descriptions/AtomPBExt.txt" /&gt;. 
                    Ce format étend le protocole largement utilisé
                    &lt;a href="http://tools.ietf.org/html/rfc5023"
				target="_blank"&gt;Atom Pub&lt;/a&gt;&lt;img
				src="/Images/ExternalLink.png"
					alt="Click to get Atom Publishing Protocol"
					title="Atom Publishing Protocol"
					longdesc="/Descriptions/AtomPB.tx" /&gt;  
                    et peut être utilisé par une variété de plateformes incluant .NET, Java, Ruby,
PHP et Python. Différents exemples de code sont proposés sur la page de &lt;a
				href="/DataBrowser/frOpenData/RennesPAV#param=NOFILTER--DataView--Results"&gt;visualisation des données&lt;/a&gt;.</value>
  </data>
  <data name="ClientLibraries" xml:space="preserve">
    <value>Bibliothèques clientes</value>
  </data>
  <data name="ContainerIsTheNameOfTheContainer" xml:space="preserve">
    <value>&lt;b&gt;&lt;i&gt;container&lt;/i&gt;&lt;/b&gt; est le nom du conteneur (par exemple, "frOpenData" pour les ensembles de données mis à disposition par l’entrepôt de données) ;</value>
  </data>
  <data name="DataFormats" xml:space="preserve">
    <value>Format de données</value>
  </data>
  <data name="DatasetIsTheNameOfTheDataSet" xml:space="preserve">
    <value>&lt;b&gt;&lt;i&gt;dataset&lt;/i&gt;&lt;/b&gt; est le nom de l'ensemble de données (par exemple, "RennesPAV" vis-à-vis de l'ensemble
des données localisant les points d'apport volontaire (PAV) des déchets ménagers
mis à disposition par le 
&lt;a href="http://www.data.rennes-metropole.fr/les-donnees/catalogue/?tx_icsopendatastore_pi1%5buid%5d=47" target="_blank"&gt;Service SIG Rennes Métropole&lt;/a&gt;
&lt;img src="/Images/ExternalLink.png"
					alt="Service SIG Rennes Métropole" 
					title="Service SIG Rennes Métropole"
					longdesc="/Descriptions/REST.txt" /&gt;
) ;</value>
  </data>
  <data name="DevelopersUsingVisualStudio2010" xml:space="preserve">
    <value>Les développeurs utilisant &lt;a href="http://www.microsoft.com/france/visualstudio/" target="_blank"&gt;
    Microsoft Visual Studio 2010&lt;/a&gt;&lt;img src="/Images/ExternalLink.png"
        alt="Click to get Microsoft Visual Studio 2010" title="Microsoft Visual Studio 2010"
        longdesc="/Descriptions/VS2010.txt" /&gt;
 peuvent utiliser WCF Data Services pour accéder aux données ainsi exposées via des classes .NET. 
 Avec Visual Studio, cela s’effectue simplement au travers de la fonctionnalité 
 &lt;a href="http://msdn.microsoft.com/en-us/data/cc974504.aspx" target="_blank"&gt;Add Service Reference&lt;/a&gt;
 &lt;img src="/Images/ExternalLink.png" alt="Click for Add Service Reference"
        longdesc="/Descriptions/AddSvcRef.txt" /&gt;(Ajouter une référence à un service)
(voir les exemples avec le Microsoft Framework.NET sur la page de &lt;a href="/DataBrowser/frOpenData/RennesPAV#param=NOFILTER--DataView--Results"&gt;
    visualisation des donées&lt;/a&gt;). 
Les interfaces de programmation Web proposées par le Kit de démarrage OGDI sont accessibles à une grande variété de technologies client. 
Ainsi, par exemple, les développeurs Java peuvent utiliser la bibliothèque 
&lt;a href="http://www.restlet.org/downloads/" target="_blank"&gt;Restlet Extension for OData&lt;/a&gt;&lt;img src="/Images/ExternalLink.png"
        alt="Restlet Extension for WCF Data Services" longdesc="/Descriptions/JavaLib.txt" /&gt;,
une composante du projet Open Source Restlet mettant à disposition un Framework léger REST pour Java.
Les développeurs PHP peuvent tirer parti du kit de développement logiciel 
&lt;a href="http://odataphp.codeplex.com/" target="_blank"&gt;OData pour PHP&lt;/a&gt;
&lt;img src="/Images/ExternalLink.png" alt="Toolkit for PHP with WCF Data Services" longdesc="/Descriptions/PHPLib.txt" /&gt;.</value>
  </data>
  <data name="ForDevelopers" xml:space="preserve">
    <value>Pour les développeurs</value>
  </data>
  <data name="GeospatialData" xml:space="preserve">
    <value>Données géospaciales</value>
  </data>
  <data name="JSON" xml:space="preserve">
    <value>JSON</value>
  </data>
  <data name="JSONP" xml:space="preserve">
    <value>JSONP</value>
  </data>
  <data name="ManyOfTheDataSetsInOGDI" xml:space="preserve">
    <value>La plupart des ensembles de données ainsi proposés est susceptible d’inclure également des données géo spatiales, qui peuvent être alors retournées dans le format 
            &lt;a href="http://fr.wikipedia.org/wiki/Keyhole_Markup_Language" target="_blank"&gt;
				 KML (Keyhole Markup Language)&lt;/a&gt;&lt;img src="/Images/ExternalLink.png"
					alt="Click to get Keyhole Markup Language" 
					title="Keyhole Markup Language (KML)"
					longdesc="/Descriptions/KML.txt" /&gt; 
                    ,rendant le Kit de démarrage OGDI compatible avec des technologies de cartographie sur poste de travail ou sur le Web, comme 			
            &lt;a href="http://www.geoportail.fr/" target="_blank"&gt;
				Géoportail&lt;/a&gt;&lt;img src="/Images/ExternalLink.png"
					alt="Click to get Géoportail" 
					title="Google Earth" 
					longdesc="/Descriptions/GoogleEarth.txt" /&gt;,
			&lt;a href="http://earth.google.com" target="_blank"&gt;
				Google Earth&lt;/a&gt;&lt;img src="/Images/ExternalLink.png"
					alt="Click to get Google Earth" 
					title="Google Earth" 
					longdesc="/Descriptions/GoogleEarth.txt" /&gt;,
            &lt;a href="http://maps.google.com" target="_blank"&gt;
				Google Maps&lt;/a&gt;&lt;img src="/Images/ExternalLink.png"
					alt="Click to get Google Maps" 
					title="Google Maps" 
					longdesc="/Descriptions/GoogleMap.txt" /&gt;,
            &lt;a href="http://www.bing.com/maps/" target="_blank"&gt;
                    Microsoft Bing Maps&lt;/a&gt;&lt;img src="/Images/ExternalLink.png"
					alt="Click to get Bing Maps" 
					title="Bing Maps"
					longdesc="/Descriptions/VE.txt" /&gt; ou encore
            &lt;a href="http://maps.yahoo.com" target="_blank"&gt;
				Yahoo! Maps&lt;/a&gt;&lt;img src="/Images/ExternalLink.png"
					alt="Click to get Yahoo! Maps" 
					title="Yahoo! Maps" 
					longdesc="/Descriptions/YahooMaps.txt" /&gt;.</value>
  </data>
  <data name="NoteThatIfTheDataSet" xml:space="preserve">
    <value>A noter que Si l'ensemble de données ne contient pas de données de géolocalisation, une requête de type KML au service de données OGDI DataLab retournera un résultat vide.</value>
  </data>
  <data name="NoteThatOGDICurrentlyOnlySupportsThe" xml:space="preserve">
    <value>A noter que le kit de démarrage OGDI DataLab ne supporte actuellement que les options
de requête de WCF Data Services $filter et $stop. Des requêtes exemples utilisant
l'ensemble des données "RennesPAV" sont disponibles sur la page &lt;a href="/Databrowser/frOpenData/RennesPAV"&gt;visualisation
des données&lt;/a&gt; du kit de développement logiciel (SDK).</value>
  </data>
  <data name="OGDIAndTheUnderlyingWindowsAzureTableStorageService" xml:space="preserve">
    <value>Le service de données OGDI DataLab et le service sous-jacent de tables Windows Azure supportent
la pagination pour les résultats d'un volume important. L’article MSDN &lt;a href="http://msdn.microsoft.com/en-us/library/dd135718.aspx"
    target="_blank"&gt;Query Timeout et la Pagination&lt;/a&gt;
&lt;img src="/Images/ExternalLink.png" alt="Click to get Query Timeout and Pagination"
    title="Query Timeout and Pagination" longdesc="/Descriptions/QueryTimeoutPagination.txt" /&gt;
de la documentation Windows Azure une description complète sur la façon dont OGDI
et la plateforme Windows Azure prennent en charge la pagination. Vous pouvez vous
référer également au code exemple "Pagination C#/ASP.NET " sur la page de &lt;a href="/DataBrowser/frOpenData/RennesPAV#param=NOFILTER--DataView--Results"&gt;
    visualisation des données&lt;/a&gt;, 
    qui illustre comment gérer la pagination en utilisant la bibliothèque cliente  
    &lt;a href="http://msdn.microsoft.com/fr-fr/data/bb931106.aspx" target="_blank"&gt;WCF Data Services.&lt;/a&gt;&lt;img src="/Images/ExternalLink.png" alt="Click to get WCF Data Services"
    title="WCF Data Services" longdesc="/Descriptions/QueryTimeoutPagination.txt" /&gt;</value>
  </data>
  <data name="OGDICanAlsoReturnDataInTheJSON" xml:space="preserve">
    <value>Le service de données d’OGDI DataLab peut aussi retourner les données au format &lt;a href="http://fr.wikipedia.org/wiki/JSON"
    target="_blank"&gt;JSON (JavaScript Object Notation)&lt;/a&gt;&lt;img src="/Images/ExternalLink.png"
        alt="Click to get JavaScript Object Notation" title="JavaScript Object Notation (JSON)"
        longdesc="/Descriptions/Json.txt" /&gt;
qui peut être plus facilement exploitable depuis JavaScript ou autre technologie.
Pour retourner des données au format JSON, il suffit d'ajouter format=json à votre
requête. Par exemple, pour retourner les points d'apport volontaire des déchets
ménagers en verre pour la métropole de Rennes au format JSON :</value>
  </data>
  <data name="OGDIDataServicesAlsoProvideDirectSupportForTheJSONP" xml:space="preserve">
    <value>OGDI DataLab fournit un support direct pour la technique &lt;a href="http://fr.wikipedia.org/wiki/JSON#JSONP"
    target="_blank"&gt;JSONP&lt;/a&gt;&lt;img src="/Images/ExternalLink.png" alt="Click to get JSONP"
        title="JSONP" longdesc="/Descriptions/JSONP.txt" /&gt;. En utilisant cette
technique, le service de données OGDI DataLab appelle la fonction de rappel (callback) que
vous aurez spécifiée, passant le résultat de votre requête au format JSON comme
format d'entrée. Pour utiliser cette technique, il convient de construire votre
requête avec les paramètres additionnels &lt;i&gt;format=json&amp;callback=&lt;callback&gt;&lt;/i&gt; où &lt;i&gt;&lt;callback&gt;&lt;/i&gt;
est le nom de votre fonction de rappel JavaScript définie dans la page émettant
la requête.</value>
  </data>
  <data name="OGDIExposesDataThrough" xml:space="preserve">
    <value>Le kit de démarrage OGDI DataLab utilise et expose des services Web &lt;a href="http://en.wikipedia.org/wiki/Representational_State_Transfer" target="_blank"&gt;
				RESTful&lt;/a&gt;&lt;img src="/Images/ExternalLink.png"
					alt="Click to get REST article on the Wikipedia" 
					title="REST"
					longdesc="/Descriptions/REST.txt" /&gt;, en l’occurrence, des services
Web implémentés à l'aide du protocole http et des principes REST, pour exposer des
données pour la programmation.
Le format de base des URLs pour invoquer un service du kit est la suivante: http://&lt;b&gt;&lt;i&gt;[project]&lt;/i&gt;&lt;/b&gt;.cloudapp.net/v1/&lt;b&gt;&lt;i&gt;[container]&lt;/i&gt;&lt;/b&gt;/&lt;b&gt;&lt;i&gt;[dataset]&lt;/i&gt;&lt;/b&gt;?&lt;b&gt;&lt;i&gt;[query]&lt;/i&gt;&lt;/b&gt; où:</value>
  </data>
  <data name="Paging" xml:space="preserve">
    <value>A propos de la pagination</value>
  </data>
  <data name="QueryingOGDI" xml:space="preserve">
    <value>Requêter OGDI DataLab</value>
  </data>
  <data name="QueryIsYourSetOfQueryParameters" xml:space="preserve">
    <value>&lt;b&gt;&lt;i&gt;query&lt;/i&gt;&lt;/b&gt; est l’ensemble des paramètres de la requête, exprimé en utilisant un sous ensemble  de la 
&lt;a href="http://msdn.microsoft.com/fr-fr/library/dd673933.aspx" target="_blank"&gt;syntaxe de requête de WCF
Data Services.&lt;/a&gt;&lt;img src="/Images/ExternalLink.png" alt="Click to get WCF Data Services query syntax"
 title="WCF Data Services query syntax" 
 longdesc="/Descriptions/ADOquerysyntax.txt" /&gt;</value>
  </data>
  <data name="ReferToTheJavaScriptSampleOnThe" xml:space="preserve">
    <value>Vous pouvez consulter l'exemple de code JavaScript sur la page  &lt;a href="/DataBrowser/frOpenData/RennesPAV#param=NOFILTER--DataView--Results"&gt;visualisation
des données&lt;/a&gt; pour un exemple utilisant JSONP avec OGDI. Dans cet exemple, la fonction AdditionalDataLoaded() est la fonction de callback JSONP.</value>
  </data>
  <data name="TheOpenGovernmentDataInitiativeIsBased" xml:space="preserve">
    <value>OGDI DataLab repose sur la plateforme Windows Azure, l’offre Platform as a Service
(PaaS) de Microsoft, un environnement d’exécution et d’hébergement ouvert qui aide
les développeurs à rapidement et facilement créer, déployer, gérer et exécuter des
applications et services Web à l'échelle de l'internet. La plateforme Windows Azure
permet ainsi aux développeurs de se concentrer sur leur cœur de métier : les applications
et les services Web. Les développeurs utilisent leurs compétences existantes (.NET,
Ruby, Python, Java, PHP, etc.) et leurs outils actuels (Visual Studio, Eclipse,
etc.) pour développer ces applications et services Web et les déployer dans le Cloud.
Pour en savoir plus, n'hésitez pas à aller sur la page d’accueil de la 
&lt;a href="http://www.microsoft.com/france/windows-azure/" target="_blank"&gt;
plateforme Windows Azure.&lt;/a&gt;&lt;img src="/Images/ExternalLink.png" 
alt="Click to get Azure Services Platform home page" title="Azure Services Platform"
longdesc="/Descriptions/Home.txt" /&gt;</value>
  </data>
  <data name="TheWindowsAzurePlatform" xml:space="preserve">
    <value>Plateforme Windows Azure</value>
  </data>
  <data name="ToMitigateSecurityVulnerabilities" xml:space="preserve">
    <value>Pour diminuer la vulnérabilité en terme de sécurité liée aux attaques de type scriptage
intersite (cross-site scripting ou XSS en abrégé), généralement les navigateurs
empêchent le JavaScript d'une page Web venant d'un domaine X de faire des requêtes
http vers un autre domaine Y. Cela empêche tout code JavaScript hébergé sur un domaine
de faire des appels directs au service de données OGDI DataLab, mais il existe plusieurs
techniques qui peuvent être utilisées comme la &lt;a href="http://softwareas.com/cross-domain-communication-with-iframes"
    target="_blank"&gt;technique fondée sur des IFrames.&lt;/a&gt;
    &lt;img src="/Images/ExternalLink.png" alt="Click to get IFRAMES-based technique"
        title="IFRAMES-based technique" longdesc="/Descriptions/IFRAMES.txt" /&gt;</value>
  </data>
  <data name="ToReturnGeospatialDataInKMLFormat" xml:space="preserve">
    <value>Pour retourner des données géo-spatiales au format KML, il suffit de rajouter &lt;i&gt;format=kml&lt;/i&gt;
à la requête. Par exemple, pour retourner les points d'apport volontaire des déchets ménagers en verre pour la métropole de Rennes au format KML :</value>
  </data>
  <data name="ProjectEstLeNomDuProjet" xml:space="preserve">
    <value>&lt;b&gt;&lt;i&gt;project&lt;/i&gt;&lt;/b&gt; est le nom de projet de service pour la publication du service fondé sur le Kit de démarrage OGDI DataLab dans Windows Azure (par exemple "ogdifrancedataservice") ;</value>
  </data>
  <data name="OGDICanAlsoReturnDataInTheRDF" xml:space="preserve">
    <value>Le service de données d’OGDI DataLab peut aussi retourner les données au format  &lt;a href="http://fr.wikipedia.org/wiki/Resource_Description_Framework"
    target="_blank"&gt;RDF (Resource Description Framework)&lt;/a&gt;&lt;img src="/Images/ExternalLink.png"
                longdesc="/Descriptions/Json.txt" /&gt;.
RDF est un modèle de graphe qui permet de décrire de façon formelle des ressources web et leur métadonnées associées. Développé par le W3C, RDF est le langage de base du Web sémantique. Pour retourner des données au format RDF, il suffit d’ajouter format=rdf à votre requête. Par exemple, pour retourner les points d’apport volontaire des déchets ménagers en verre pour la métropole de rennes au format RDF :</value>
  </data>
  <data name="RDF" xml:space="preserve">
    <value>RDF</value>
  </data>
  <data name="OGDIDemoURLFormat" xml:space="preserve">
    <value>&lt;a href="http://ogdifrancedataservice.cloudapp.net/v1/frOpenData/RennesPAV/?$filter=flux eq 'VE' &amp;format={0}"&gt;
                http://ogdifrancedataservice.cloudapp.net/v1/frOpenData/RennesPAV/?$filter=flux eq 'VE' &amp;format={0}&lt;/a&gt;</value>
  </data>
</root>