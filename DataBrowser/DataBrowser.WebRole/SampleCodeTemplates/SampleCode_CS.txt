<%@ Page Language="C#" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<script runat="server">
    // This sample requires the .NET Framework 4.0.
    // To get this the sample to work, perform the 
    // following steps:
    //
    //      1. Create a new Web Site in Visual Studio 2010
    //      2. Add a new Web Form (name it what you like)
    //      3. Make sure the "Place code in separate file" is unchecked in the 
    //         Add New Item dialog
    //      4. Replace the entire contents of the .aspx file with the entire 
    //         text of this sample 
    //      5. Right click on the project node in Solution Explorer
    //      6. Select Add Service Reference
    //      7. Enter service endpoint URL into the Address field
    //         For this example, we are using the dc container and the url is http://ogdi.cloudapp.net/v1/dc
    //
    // The Ogdi.DataServiceContexts sample makes it
    // very easy for .NET developers to query
    // for data using LINQ.  This sample is uses code 
    // generation and will enable you to automatically
    // generate updated classes as new data is published
    // into OGDI.

    protected void Page_Load(object sender, EventArgs e)
    {
        var context = new Ogdi.dcDataService(new Uri("http://ogdi.cloudapp.net/v1/dc"));
        
        //var context = new Ogdi.DataServiceContexts.dc.dcDataServiceContext();

        // NOTE: You can replace BankLocations with any EntitySet available
        //       See http://ogdisdk.cloudapp.net/DataCatalog.aspx
        //       for a full list.

        var query = from locations in context.BankLocations
                    select locations;

        // The query above translates into the following URL:
        //      http://ogdi.cloudapp.net/v1/dc/BankLocations()

        // Execute query
        List<Ogdi.BankLocationsItem> results = query.ToList();

        // Bind the reults to the GridView.
        GridView1.DataSource = results;
        GridView1.DataBind();

        // Execute the same query, but return KML
        var wc = new System.Net.WebClient();
        var queryUrl = query.ToString() + "?format=kml";
        TextBox1.Text = wc.DownloadString(new Uri(queryUrl));

        // Currently, the OGDI service only supports the $filter 
        // and $top WCF Data Services querystring paramaters.        

        // Therefore, the following queries are valid:

        query = (from locations in context.BankLocations
                 select locations).Take(5);

        // The query above translates into the following URL:
        //      http://ogdi.cloudapp.net/v1/dc/BankLocations()?$top=5

        query = from locations in context.BankLocations
                where locations.name == "Adams Bank"
                select locations;

        // The query above translates into the following URL:
        //      http://ogdi.cloudapp.net/v1/dc/BankLocations()?$filter=name eq 'Adams Bank'

        query = (from locations in context.BankLocations
                 where locations.name == "Adams Bank"
                 select locations).Take(5);

        // The query above translates into the following URL:
        //      http://ogdi.cloudapp.net/v1/dc/BankLocations()?$filter=name eq 'Adams Bank'&$top=5

        // Although $filter is supported, not all $filter options 
        // are available.  For example, substringof() is not supported.

        query = from locations in context.BankLocations
                where locations.name.Contains("Adam")
                select locations;

        // The query above translates into the following URL:
        //      http://ogdi.cloudapp.net/v1/dc/BankLocations()?$filter=substringof('Adam',name)

        // Any LINQ queries that translate into usage of unsupported
        // WCF Data Services querystring parameters will
        // result in a DataServiceQueryException.  
        // As another example, the query below will result in the usage of $skip.  
        // Therefore a DataServiceQueryException will be thrown.

        query = (from locations in context.BankLocations
                 where locations.name == "Adams Bank"
                 select locations).Skip(5).Take(5);

        // The query above translates into the following URL:
        //      {http://ogdi.cloudapp.net/v1/dc/BankLocations()?$filter=name eq 'Adams Bank'&$skip=5&$top=5

        // NOTE: To implement paging, see "C#/.NET Paging" sample
    }
</script>

<html xmlns="http://www.w3.org/1999/xhtml">
<head id="Head1" runat="server">
    <title></title>
</head>
<body>
    <form id="form1" runat="server">
    <div>
        <asp:GridView ID="GridView1" runat="server">
        </asp:GridView>
        <asp:TextBox ID="TextBox1" runat="server" TextMode="MultiLine" Width="100%" Height="200px"></asp:TextBox>
    </div>
    </form>
</body>
</html>	